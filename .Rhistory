trans <- "identity"
my_breaks <- quantile(mGrid$m,seq(0,1,length.out = 11), na.rm = TRUE)
mGrid$dataType <- factor(mGrid$dataType, levels = c("true", "raw", "corrected"))
#   val[i] <- sum((mGrid$m[mGrid$dataType == "corrected"] - mGrid$m[mGrid$dataType == "true"])^2)
# }
plotM <- ggplot2::ggplot()+
# ggplot2::geom_contour(data = mGrid, ggplot2::aes(longitude, latitude, z = mhat))+
ggplot2::labs(fill = "estimated\n migratory\n connectivity")+
ggplot2::scale_fill_distiller("connectivity", palette = "Spectral",
values = scales::rescale(my_breaks),
trans = trans,limits =range(my_breaks),
breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
plotM <- plotM + ggplot2::facet_grid(dataType ~.)
plotM <- plotM + ggplot2::geom_tile(data = mGrid, ggplot2::aes(x = longitude, y = latitude,fill = m),
height = 1/res_y,width = 1/res_x)
plotM
rwd$estimates$r_cont <- (exp(rwd$estimates$lm$spät$intercept)/matrix(fVonX, ncol = 100)/100/(1-rwd$estimates$s)*rwd$breedingAreas$spät$numberOfRecoveries/rwd$breedingAreas$spät$markedInds)
rGrid <- as.data.frame(as.numeric(rwd$estimates$r_cont)/res_x/res_y)
rGrid$X1 <- rep(y,each=res_x)
rGrid$X2 <- rep(y,res_y)
rGrid <- rGrid[,c(2,3,1)]
rGrid$breedingArea <- "spät"
colnames(rGrid) <- c("longitude","latitude","m","breedingArea")
#mGrid <- mGrid[mGrid$breedingArea == "all",]
rGrid$dataType <- "raw"
plotR <- ggplot2::ggplot()+
# ggplot2::geom_contour(data = mGrid, ggplot2::aes(longitude, latitude, z = mhat))+
# ggplot2::labs(fill = "estimated\n migratory\n connectivity")+
ggplot2::scale_fill_distiller("recovery", palette = "Spectral",
values = scales::rescale(my_breaks),
trans = trans,limits =range(my_breaks),
breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
plotR <- plotR + ggplot2::facet_grid(dataType ~.)
plotR <- plotR + ggplot2::geom_tile(data = rGrid, ggplot2::aes(x = longitude, y = latitude,fill = m),
height = 1/res_y,width = 1/res_x)
plotR
my_breaks <- quantile(rGrid$m,seq(0,1,length.out = 11), na.rm = TRUE)
plotR <- ggplot2::ggplot()+
# ggplot2::geom_contour(data = mGrid, ggplot2::aes(longitude, latitude, z = mhat))+
# ggplot2::labs(fill = "estimated\n migratory\n connectivity")+
ggplot2::scale_fill_distiller("recovery", palette = "Spectral",
values = scales::rescale(my_breaks),
trans = trans,limits =range(my_breaks),
breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
plotR <- plotR + ggplot2::facet_grid(dataType ~.)
plotR <- plotR + ggplot2::geom_tile(data = rGrid, ggplot2::aes(x = longitude, y = latitude,fill = m),
height = 1/res_y,width = 1/res_x)
plotR
knots <- seq(0,1,le=5)
knots_v <- knots_w <- knots[2:(length(knots)-1)]
y = seq(0,1,le=100)
knots_prop <-c(0, 0.405, 1)*length(y)
# knots_prop y-direction: c(0,0.405,0.46,10), x-direction: c(0,1)
degree <- 3
bspline <- splines2::bSpline(y,knots=knots_v,degree = degree, intercept = TRUE)%x%
splines2::bSpline(y,knots=knots_w,degree = degree, intercept = TRUE)
A_vv <- splines2::dbs(y,knots=knots_v,derivs = 2,degree = degree, intercept = TRUE)%x%
splines2::bSpline(y,knots=knots_w,degree = degree, intercept = TRUE)
A_ww <- splines2::bSpline(y,knots=knots_v,degree = degree, intercept = TRUE)%x%
splines2::dbs(y,knots=knots_w,derivs = 2,degree = degree, intercept = TRUE)
A_vw <- splines2::dbs(y,knots=knots_v,derivs = 1,degree = degree, intercept = TRUE)%x%
splines2::dbs(y,knots=knots_w,derivs = 1,degree = degree, intercept = TRUE)
A <- A_vv+A_ww + 2*A_vw
A_sqrt <- t(A_vv)%*%A_vv + t(A_ww)%*%A_ww + 2*(t(A_vw)%*%A_vw)
split <- data.frame(v = rep(1:length(y),each = length(y)), w= rep(1:length(y), length(y)))
split$y1 <- sqrt((split$v - 69.27528)^2+(split$w-64.26133)^2) < 25
split$y2 <- sqrt((split$v - 69.27528)^2+(split$w-64.26133)^2) < 50
split$winteringArea[split$y1 == 1] <- 1
split$winteringArea[split$y1 == 0 & split$y2 == 1] <- 2
split$winteringArea[split$y1 == 0 & split$y2 == 0] <- 3
#m_1st = as.numeric(mro2$estimates$m$b2)
m_1st = as.numeric(rwd$estimates$m$früh)
win <- numeric(length(m_1st))
win[!is.na(m_1st)] <- 1
#test <- mro2$estimates$m$b2
#test[1:15,1:25] <- NA
#m_1st <- as.numeric(test)
#m_1st[is.na(m_1st)] <- 0
prop <- read.table("/home/schirmer/Dokumente/DokumenteBuero/BiomatheHGW/PhD/projects/connectivity/realDataToyApplication/BreGoi/prop.txt", header = TRUE)
prop <- as.matrix(prop)[1,]
#
lambda <-c(0.00001,10)
myPen <- pen(A=A_sqrt, bspline, beta, y, knots_v, knots_w,knots_prop = knots_prop, m_1st, prop, degree,lambda = lambda,win = win)
myGrrr <- gr(A=A_sqrt, bspline =  bspline, beta = beta, y = y,
knots_v = knots_v, knots_w = knots_w ,knots_prop = knots_prop,
m = m_1st, prop = prop, degree = degree,lambda = lambda, split = split)
res <- list(value = list(), par = list())
for(no in 1:10){
beta0 <- rnorm((length(knots_v)+degree+1)*(length(knots_w)+degree+1))
system.time({optBeta <- optim(par = beta0, fn=myPen, gr = NULL,
method = "CG", control = list(maxit = 10000, reltol = 1e-4))});optBeta
res[["value"]][[no]] <- optBeta$value
res[["par"]][[no]] <- optBeta$par
}
# val <- numeric()
# for(i in 1:10){
#   print(i)
optBeta$par <- res$par[[which.min(res$value)]]
res_x <- ncol(rwd$estimates$lm$all$intercept)
res_y <- nrow(rwd$estimates$lm$all$intercept)
hS <- splines2::bSpline(y,knots=knots_v,degree = degree, intercept = TRUE)%x%
splines2::bSpline(y,knots=knots_w,degree = degree, intercept = TRUE)
hVonX <- ((hS)%*%optBeta$par)
fVonX <- exp(hVonX)*win/sum(exp(hVonX)*win)
fVonX[fVonX == 0] <- NA
mGrid <- as.data.frame(matrix(fVonX))#/res_x/res_y)
mGrid$X1 <- rep(y,each=res_x)
mGrid$X2 <- rep(y,res_y)
mGrid <- mGrid[,c(2,3,1)]
mGrid$breedingArea <- "früh"
colnames(mGrid) <- c("longitude","latitude","m","breedingArea")
mGrid$m <- mGrid$m*win
mGrid$m[mGrid$m== 0] <- NA
#mGrid <- mGrid[mGrid$breedingArea == "all",]
mGrid$dataType <- "corrected"
mGrid1st <- as.data.frame(as.numeric(rwd$estimates$m[["früh"]])/10)#/res_x/res_y)
mGrid1st$X1 <- rep(y,each=res_x)
mGrid1st$X2 <- rep(y,res_y)
mGrid1st <- mGrid1st[,c(2,3,1)]
mGrid1st$breedingArea <- "früh"
colnames(mGrid1st) <- c("longitude","latitude","m","breedingArea")
#mGrid <- mGrid[mGrid$breedingArea == "all",]
mGrid1st$dataType <- "raw"
mGrid <- as.data.frame(rbind(mGrid,mGrid1st))
b <- "früh"
m <- rwd$breedingAreas[[b]]$migratoryConnectivity
trans <- "identity"
my_breaks <- quantile(mGrid$m,seq(0,1,length.out = 11), na.rm = TRUE)
mGrid$dataType <- factor(mGrid$dataType, levels = c("true", "raw", "corrected"))
#   val[i] <- sum((mGrid$m[mGrid$dataType == "corrected"] - mGrid$m[mGrid$dataType == "true"])^2)
# }
plotM <- ggplot2::ggplot()+
# ggplot2::geom_contour(data = mGrid, ggplot2::aes(longitude, latitude, z = mhat))+
ggplot2::labs(fill = "estimated\n migratory\n connectivity")+
ggplot2::scale_fill_distiller("connectivity", palette = "Spectral",
values = scales::rescale(my_breaks),
trans = trans,limits =range(my_breaks),
breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
plotM <- plotM + ggplot2::facet_grid(dataType ~.)
plotM <- plotM + ggplot2::geom_tile(data = mGrid, ggplot2::aes(x = longitude, y = latitude,fill = m),
height = 1/res_y,width = 1/res_x)
plotM
rwd$estimates$r_cont <- (exp(rwd$estimates$lm$früh$intercept)/matrix(fVonX, ncol = 100)/100/(1-rwd$estimates$s)*rwd$breedingAreas$früh$numberOfRecoveries/rwd$breedingAreas$früh$markedInds)
rGrid <- as.data.frame(as.numeric(rwd$estimates$r_cont)/res_x/res_y)
rGrid$X1 <- rep(y,each=res_x)
rGrid$X2 <- rep(y,res_y)
rGrid <- rGrid[,c(2,3,1)]
rGrid$breedingArea <- "früh"
colnames(rGrid) <- c("longitude","latitude","m","breedingArea")
#mGrid <- mGrid[mGrid$breedingArea == "all",]
rGrid$dataType <- "raw"
my_breaks <- quantile(rGrid$m,seq(0,1,length.out = 11), na.rm = TRUE)
plotR <- ggplot2::ggplot()+
# ggplot2::geom_contour(data = mGrid, ggplot2::aes(longitude, latitude, z = mhat))+
# ggplot2::labs(fill = "estimated\n migratory\n connectivity")+
ggplot2::scale_fill_distiller("recovery", palette = "Spectral",
values = scales::rescale(my_breaks),
trans = trans,limits =range(my_breaks),
breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
plotR <- plotR + ggplot2::facet_grid(dataType ~.)
plotR <- plotR + ggplot2::geom_tile(data = rGrid, ggplot2::aes(x = longitude, y = latitude,fill = m),
height = 1/res_y,width = 1/res_x)
plotR
lattice::levelplot(t(exp(rwd$estimates$lm$früh$intercept)/matrix(fVonX, ncol = 100)/100/(1-rwd$estimates$s)*rwd$breedingAreas$früh$numberOfRecoveries/rwd$breedingAreas$früh$markedInds),
at = c(quantile(as.numeric(exp(rwd$estimates$lm$früh$intercept)/matrix(fVonX, ncol = 100)/100/(1-rwd$estimates$s)*rwd$breedingAreas$früh$numberOfRecoveries/rwd$breedingAreas$früh$markedInds), seq(0,1,by = 0.1), na.rm = TRUE)))
lattice::levelplot(mGrid$m[mGrid$dataType == "corrected"])
lattice::levelplot(matrix(mGrid$m[mGrid$dataType == "corrected"],ncol=100))
lattice::levelplot(t(matrix(mGrid$m[mGrid$dataType == "corrected"],ncol=100)))
plotM
lattice::levelplot(t(matrix(mGrid$m[mGrid$dataType == "estimated"],ncol=100)))
lattice::levelplot(t(matrix(mGrid$m[mGrid$dataType == "raw"],ncol=100)))
lattice::levelplot(t(matrix(mGrid$m[mGrid$dataType == "corrected"],ncol=100)))
# breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
#labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1))+
# breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
#labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1))
+
ggplot2::theme(text = ggplot2::element_text(size = 24))
#   val[i] <- sum((mGrid$m[mGrid$dataType == "corrected"] - mGrid$m[mGrid$dataType == "true"])^2)
# }
plotM <- ggplot2::ggplot()+
# ggplot2::geom_contour(data = mGrid, ggplot2::aes(longitude, latitude, z = mhat))+
ggplot2::labs(fill = "estimated\n migratory\n connectivity")+
ggplot2::scale_fill_distiller("connectivity", palette = "Spectral",
values = scales::rescale(my_breaks),
trans = trans,limits =range(my_breaks),
# breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
#labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1)
)+                               +
ggplot2::theme(text = ggplot2::element_text(size = 24))
#   val[i] <- sum((mGrid$m[mGrid$dataType == "corrected"] - mGrid$m[mGrid$dataType == "true"])^2)
# }
plotM <- ggplot2::ggplot()+
# ggplot2::geom_contour(data = mGrid, ggplot2::aes(longitude, latitude, z = mhat))+
ggplot2::labs(fill = "estimated\n migratory\n connectivity")+
ggplot2::scale_fill_distiller("connectivity", palette = "Spectral",
values = scales::rescale(my_breaks),
trans = trans,limits =range(my_breaks),
# breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
#labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1)
)+
ggplot2::theme(text = ggplot2::element_text(size = 24))
plotM <- plotM + ggplot2::facet_grid(dataType ~.)
plotM <- plotM + ggplot2::geom_tile(data = mGrid, ggplot2::aes(x = longitude, y = latitude,fill = m),
height = 1/res_y,width = 1/res_x)
plotM
# values = scales::rescale(my_breaks),
# trans = trans,limits =range(my_breaks),
# breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
#   val[i] <- sum((mGrid$m[mGrid$dataType == "corrected"] - mGrid$m[mGrid$dataType == "true"])^2)
# }
plotM <- ggplot2::ggplot()+
# ggplot2::geom_contour(data = mGrid, ggplot2::aes(longitude, latitude, z = mhat))+
ggplot2::labs(fill = "estimated\n migratory\n connectivity")+
ggplot2::scale_fill_distiller("connectivity", palette = "Spectral",
# values = scales::rescale(my_breaks),
# trans = trans,limits =range(my_breaks),
# breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
plotM <- plotM + ggplot2::facet_grid(dataType ~.)
plotM <- plotM + ggplot2::geom_tile(data = mGrid, ggplot2::aes(x = longitude, y = latitude,fill = m),
height = 1/res_y,width = 1/res_x)
plotM
plotM <- plotM + ggplot2::geom_tile(data = mGrid[mGrid$dataType == "corrected",], ggplot2::aes(x = longitude, y = latitude,fill = m),
height = 1/res_y,width = 1/res_x)
#   val[i] <- sum((mGrid$m[mGrid$dataType == "corrected"] - mGrid$m[mGrid$dataType == "true"])^2)
# }
plotM <- ggplot2::ggplot()+
# ggplot2::geom_contour(data = mGrid, ggplot2::aes(longitude, latitude, z = mhat))+
ggplot2::labs(fill = "estimated\n migratory\n connectivity")+
ggplot2::scale_fill_distiller("connectivity", palette = "Spectral",
# values = scales::rescale(my_breaks),
# trans = trans,limits =range(my_breaks),
# breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
plotM <- plotM + ggplot2::facet_grid(dataType ~.)
plotM <- plotM + ggplot2::geom_tile(data = mGrid[mGrid$dataType == "corrected",], ggplot2::aes(x = longitude, y = latitude,fill = m),
height = 1/res_y,width = 1/res_x)
plotM
#   val[i] <- sum((mGrid$m[mGrid$dataType == "corrected"] - mGrid$m[mGrid$dataType == "true"])^2)
# }
plotM <- ggplot2::ggplot()+
# ggplot2::geom_contour(data = mGrid, ggplot2::aes(longitude, latitude, z = mhat))+
ggplot2::labs(fill = "estimated\n migratory\n connectivity")+
ggplot2::scale_fill_distiller("connectivity", palette = "Spectral",
# values = scales::rescale(my_breaks),
# trans = trans,limits =range(my_breaks),
# breaks = seq(my_breaks[1],my_breaks[11],length.out = 5),
labels = formatC(seq(my_breaks[1],my_breaks[11],length.out = 5),format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
plotM <- plotM + ggplot2::facet_grid(dataType ~.)
plotM <- plotM + ggplot2::geom_tile(data = mGrid[mGrid$dataType == "raw",], ggplot2::aes(x = longitude, y = latitude,fill = m),
height = 1/res_y,width = 1/res_x)
plotM
lattice::levelplot(t(matrix(mGrid$m[mGrid$dataType == "corrected"],ncol=100)))
lattice::levelplot(t(matrix(mGrid$m[mGrid$dataType == "raw"],ncol=100)))
lattice::levelplot(t(exp(rwd$estimates$lm$früh$intercept)/matrix(fVonX, ncol = 100)/100/(1-rwd$estimates$s)*rwd$breedingAreas$früh$numberOfRecoveries/rwd$breedingAreas$früh$markedInds),
at = c(quantile(as.numeric(exp(rwd$estimates$lm$früh$intercept)/matrix(fVonX, ncol = 100)/100/(1-rwd$estimates$s)*rwd$breedingAreas$früh$numberOfRecoveries/rwd$breedingAreas$früh$markedInds), seq(0,1,by = 0.1), na.rm = TRUE)))
plotRawRecoveries(rwd, pdf = FALSE, pdfName = "rawRecoveries.pdf",
areaNames = c("oie","bretolet","mettnau","jaman","ulmet"),
left = -15, bottom = 30, right = 20, top = 60)
plotRawRecoveries(rwd, pdf = FALSE, pdfName = "rawRecoveries.pdf",
areaNames = c("früh","mittel","spät"),
left = -15, bottom = 30, right = 20, top = 60)
devtools::install("continuousSpatioTemporalMarkRecapture/")
library(continousSpatioTemporalMarkRecapture)
plotRawRecoveries(rwd, pdf = FALSE, pdfName = "rawRecoveries.pdf",
areaNames = c("früh"),
left = -15, bottom = 30, right = 30, top = 65)
ggplot(data = rec, aes(x = bdoy,y = flon))+
geom_point()
ggplot2::ggplot(data = rec, aes(x = bdoy,y = flon))+
geom_point()
ggplot2::ggplot(data = rec, ggplot2::aes(x = bdoy,y = flon))+
ggplot2::geom_point()
ber <- read.table("/home/schirmer/Dokumente/DokumenteBuero/BiomatheHGW/PhD/projects/connectivity/realDataToyApplication/BreGoi/oie_EF.txt", header = TRUE)
ber$Gruppe[ber$bdoy <=266] <- "früh"
ber$Gruppe[ber$bdoy >266 & ber$bdoy <= 279] <- "mittel"
ber$Gruppe[ber$bdoy > 279] <- "spät"
ber <- table(ber$Gruppe)
ber <- as.data.frame(cbind(c("früh","mittel","spät"),ber))
ber$ber <- as.numeric(as.character(ber$ber))
colnames(ber) <- c("markAreas","markedInds")
rec$markArea <- factor(rec$markArea)
ber$markAreas <- factor(ber$markAreas)
rwd <- markRecaptureObject(window = win3,
realRecoveries = rec,
markedInds = ber$markedInds,
observationTime = 5,
breedingAreaNames = as.character(ber$markArea))
plotRawRecoveries(rwd, pdf = FALSE, pdfName = "rawRecoveries.pdf",
areaNames = c("früh","mittel","spät"),
left = -15, bottom = 30, right = 20, top = 60)
plotRawRecoveries(rwd, pdf = FALSE, pdfName = "rawRecoveries.pdf",
areaNames = c("früh"),
left = -15, bottom = 30, right = 30, top = 65)
plotRawRecoveries(rwd, pdf = FALSE, pdfName = "rawRecoveries.pdf",
areaNames = c("früh"),
left = -15, bottom = 30, right = 20, top = 60)
plotRawRecoveries(rwd, pdf = FALSE, pdfName = "rawRecoveries.pdf",
areaNames = c("mittel"),
left = -15, bottom = 30, right = 30, top = 65)
plotRawRecoveries(rwd, pdf = FALSE, pdfName = "rawRecoveries.pdf",
areaNames = c("mittel"),
left = -15, bottom = 30, right = 20, top = 60)
plotRawRecoveries(rwd, pdf = FALSE, pdfName = "rawRecoveries.pdf",
areaNames = c("spät"),
left = -15, bottom = 30, right = 20, top = 60)
plotKDE("früh",res_x,rwd,dataType = "data", facetByTime = F)
res_x <- res_y <- 100
rwd <- estKDE(rwd,res_x,dataType = "data", xname = "recLon", yname = "recLat",timename = "age")
rwd <- estKDE(rwd,res_x,all = TRUE, dataType = "data", xname = "recLon", yname = "recLat",timename = "age")
plotKDE("früh",res_x,rwd,dataType = "data", facetByTime = F)
markRecaptureObject <- rwd
T <- markRecaptureObject$observationTime
xlim <- markRecaptureObject$winteringArea$window$xrange
kde <- markRecaptureObject$kde[[dataType]]
dim <- markRecaptureObject$spatialDim
dataType = "data"
kde <- markRecaptureObject$kde[[dataType]]
dim <- markRecaptureObject$spatialDim
ylim <- markRecaptureObject$winteringArea$window$yrange
kdeGrid <- reshape::melt(kde[[b]]$spatial.z)[c(1:3)]
colnames(kdeGrid) <- c("longitude","latitude","kde")
kdeGrid$dataType <- "estimated"
trans <- "identity"
my_breaks <- seq(min(kdeGrid$kde,na.rm = TRUE),
max(kdeGrid$kde,na.rm = TRUE),length.out = 7)[2:6]
pg <- ggplot2::ggplot()+
ggplot2::geom_tile(data = kdeGrid, ggplot2::aes(longitude, latitude,fill = kde)) +
#ggplot2::geom_contour(data = kdeGrid, ggplot2::aes(longitude, latitude, z =kde,colour = ..level..))+
ggplot2::ggtitle(paste("breeding area",b))+
ggplot2::scale_fill_distiller("kde", palette = "Spectral",
trans = trans,# limits = c(4e-44,1),
breaks = my_breaks, labels = formatC(my_breaks,format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
pg <- pg +
ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3) +
ggplot2::coord_sf(xlim = xlim,
ylim = ylim,
expand = FALSE)
pg
T <- markRecaptureObject$observationTime
xlim <- markRecaptureObject$winteringArea$window$xrange
kde <- markRecaptureObject$kde[[dataType]]
dim <- markRecaptureObject$spatialDim
ylim <- markRecaptureObject$winteringArea$window$yrange
kdeGrid <- reshape::melt(kde[[b]]$spatial.z)[c(1:3)]
colnames(kdeGrid) <- c("longitude","latitude","kde")
kdeGrid$dataType <- "estimated"
my_breaks <- seq(min(kdeGrid$kde,na.rm = TRUE),
max(kdeGrid$kde,na.rm = TRUE),length.out = 7)[2:6]
pg <- ggplot2::ggplot()+
ggplot2::geom_tile(data = kdeGrid, ggplot2::aes(longitude, latitude,fill = kde)) +
#ggplot2::geom_contour(data = kdeGrid, ggplot2::aes(longitude, latitude, z =kde,colour = ..level..))+
ggplot2::ggtitle(paste("breeding area",b))+
ggplot2::scale_fill_distiller("kde", palette = "Spectral",
trans = trans,# limits = c(4e-44,1),
breaks = my_breaks, labels = formatC(my_breaks,format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
pg
pg <- pg +
ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3) +
ggplot2::coord_sf(xlim = xlim,
ylim = ylim,
expand = FALSE)
pg
pg <- ggplot2::ggplot()+
ggplot2::geom_tile(data = kdeGrid, ggplot2::aes(longitude, latitude,fill = kde)) +
#ggplot2::geom_contour(data = kdeGrid, ggplot2::aes(longitude, latitude, z =kde,colour = ..level..))+
ggplot2::ggtitle(paste("breeding area",b))+
ggplot2::scale_fill_distiller("kde", palette = "Spectral",
trans = trans,# limits = c(4e-44,1),
breaks = my_breaks, labels = formatC(my_breaks,format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
pg <- pg +
# ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3) +
ggplot2::coord_sf(xlim = xlim,
ylim = ylim,
expand = FALSE)
pg
countryBoundaries
pg <- pg +
ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3) +
ggplot2::coord_sf(xlim = xlim,
ylim = ylim,
expand = FALSE)
pg
pg <- ggplot2::ggplot()+
ggplot2::geom_tile(data = kdeGrid, ggplot2::aes(longitude, latitude,fill = kde)) +
#ggplot2::geom_contour(data = kdeGrid, ggplot2::aes(longitude, latitude, z =kde,colour = ..level..))+
ggplot2::ggtitle(paste("breeding area",b))+
ggplot2::scale_fill_distiller("kde", palette = "Spectral",
trans = trans,# limits = c(4e-44,1),
breaks = my_breaks, labels = formatC(my_breaks,format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 24))
ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3)
ggplot2::ggplot()+ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3)
xlim
ggplot2::ggplot()+ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3)+ggplot2::coord_sf(xlim = xlim,
ylim = ylim,
expand = FALSE)
ylim
ggplot2::ggplot()+ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3)+ggplot2::coord_sf(xlim = xlim,ylim = ylim,expand = FALSE)
ggplot2::ggplot()+ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3)+ggplot2::coord_sf(xlim = xlim,ylim = c(1,10),expand = FALSE)
ggplot2::ggplot()+ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3)+ggplot2::coord_sf(xlim = c(1,10),ylim = c(1,10),expand = FALSE)
ggplot2::ggplot()+ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3)+ggplot2::coord_sf(xlim = c(1,10),ylim = c(1,10),expand = TRUE)
quartz()
loadfonts(dev="win")
ggplot2::ggplot()+ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3)+ggplot2::coord_sf(xlim = c(1,10),ylim = c(1,10),expand = TRUE)+ggplot2::theme(text=element_text(family="Garamond", size=14))
ggplot2::ggplot()+ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3)+ggplot2::coord_sf(xlim = c(1,10),ylim = c(1,10),expand = TRUE)+ggplot2::theme(text=ggplot2::element_text(family="Garamond", size=14))
pg <- ggplot2::ggplot()+
ggplot2::geom_tile(data = kdeGrid, ggplot2::aes(longitude, latitude,fill = kde)) +
#ggplot2::geom_contour(data = kdeGrid, ggplot2::aes(longitude, latitude, z =kde,colour = ..level..))+
ggplot2::ggtitle(paste("breeding area",b))+
ggplot2::scale_fill_distiller("kde", palette = "Spectral",
trans = trans,# limits = c(4e-44,1),
breaks = my_breaks, labels = formatC(my_breaks,format="e",digits=1))+
ggplot2::theme(text = ggplot2::element_text(size = 23))
pg <- pg +
ggplot2::geom_sf(data = countryBoundaries, color = "grey30",fill = "white", size = .3) +
ggplot2::coord_sf(xlim = xlim,
ylim = ylim,
expand = FALSE)
pg
f = data.frame(one = c(1:5), two = c(6:10))
ggplot(f, aes(one,two)) + geom_point()
library(ggplot2)
f = data.frame(one = c(1:5), two = c(6:10))
ggplot(f, aes(one,two)) + geom_point()
rnorm(199)
devtools::document()
devtools::document()
knots_prop
split <- rep(1:4, each = 25)
devtools::document()
devtools::document()
devtools::document()
?ggplot2::stat_function
data.frame(x = seq(0,1,le=100))
mro$estimates$r
?optim
setwd("..")
devtol
devtools::document()
setwd("continuousSpatioTemporalMarkRecapture/")
devtools::document()
?calcDiscrete
?estS
devtools::document()
?estS
?calcDiscreteM
devtools::document()
?calcDiscreteM
?combEstimate
help(package = "continuousSpatioTemporalMarkRecapture")
help(package = "base")
devtools::document()
?combEstimate
devtools::document()
?combEstimate
devtools::document()
?combEstimate
?lm
devtools::document()
?combEstimate
devtools::document()
?combEstimate
devtools::document()
devtools::document()
?combEstimate
devtools::document()
?combEstimate
devtools::document()
?combEstimate
devtools::document()
?continousSpatioTemporalMarkRecapture
help(package = "continuousSpatioTemporalMarkRecapture")
package?continuousSpatioTemporalMarkRecapture
setwd("..")
devtools::install("continuousSpatioTemporalMarkRecapture/")
setwd("continuousSpatioTemporalMarkRecapture/")
package?continousSpatioTemporalMarkRecapture
package?continuousSpatioTemporalMarkRecapture
package?continuousSpatioTemporalMarkRecapture
package?continousSpatioTemporalMarkRecapture
package?continuousSpatioTemporalMarkRecapture
?usethis::use_description
library(continuousSpatioTemporalMarkRecapture)
?combEstimate
rm(continousSpatioTemporalMarkRecapture)
library(continuousSpatioTemporalMarkRecapture)
?combEstimate
continuousSpatioTemporalMarkRecapture?continuousSpatioTemporalMarkRecapture
devtools::document()
library(continuousSpatioTemporalMarkRecapture)
help(p = "base")
library(continuousSpatioTemporalMarkRecapture)
library(continuousSpatioTemporalMarkRecapture)
?sum
